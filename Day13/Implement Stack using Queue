Stack (LIFO - Last In First Out)
I/p : pushing 10, 20, 30, 40
o/p :
Stack Size : 4
Current top : 40    
Current top : 30   // after deleting top , new top will be 30

// Imlplementation of stacks using queues (Pop operation costly)
#include <bits/stdc++.h>
using namespace std;

class Stack
{
	public :
	queue<int> q1 , q2;
	int length ;
	
	Stack()
	{
		length = 0; 
	}
	
	void push(int data)
	{
		q1.push(data);
		++length;
	}
	
	int size()
	{
		return length;
	}
	
	int top()
	{
		if(length == 0) {
			cout << "Stack empty ";
			return -1;
		}
		
		while(q1.size() > 1)
		{
			q2.push(q1.front()); q1.pop();
		}
		
	    int val = q1.front(); q1.pop();
	    q2.push(val);
	    
	    // swapping q1 and q2 , then only next time we can push q1 to q2 .
	    // Otherwise, q1 will remain empty and makes runtime error 
	    swap(q1,q2);
	    
	    return val;
	}
	
	void pop()
	{
		if(length == 0) {
			cout << "Stack empty ";
			return;
		}
		
		while(q1.size() > 1)
		{
			q2.push(q1.front()); q1.pop();
		}
		
		q1.pop();
		--length;
		
		 // swapping q1 and q2 , then only next time we can push q1 to q2 .
	    // Otherwise, q1 will remain empty and makes runtime error 
		swap(q1,q2);
	}
};


int main() {
	Stack s;
	s.push(10);
	s.push(20);
	s.push(30);
	s.push(40);
	
	cout << "Stack size : " << s.size() << endl;
	cout << "Current top :" << s.top() << endl;
	s.pop();                 // deleting top element which is 40
	cout << "Current top :" << s.top() << endl;
	
	
	return 0;
}
