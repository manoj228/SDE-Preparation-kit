Input: n = 5, ranges = [3,4,1,1,0,0]
Output: 1
Explanation: The tap at point 0 can cover the interval [-3,3]
The tap at point 1 can cover the interval [-3,5]
The tap at point 2 can cover the interval [1,3]
The tap at point 3 can cover the interval [2,4]
The tap at point 4 can cover the interval [4,4]
The tap at point 5 can cover the interval [5,5]
Opening Only the second tap will water the whole garden [0,5]


Optimal solution:

class Solution {
public:
    static bool cmp(const pair<int,int> a,const pair<int,int> b)
    {
        if(a.second != b.second)
            return a.second > b.second;
        
        return a.first < b.first;
    }
    
    int minTaps(int n, vector<int>& ranges) {
        
        int st, end , pos ;
        vector<pair<int,int>> res;
        
        for(int i=0; i<=n; i++)
        {
            st = max(0,i-ranges[i]);
            end = min(n,i+ranges[i]);
            res.push_back({st,end});
        }
        
        sort(res.begin(), res.end(), cmp);
        
        int fl = n , ans = 0;
        for(int i=0; i<=n; )
        {
            int c = 0;
            
            pos = fl;
            
            while((i<=n) && (res[i].second >= fl))
            {
                pos = min(pos, res[i].first);
                i++;
                c = 1;
            }
            
            fl = pos;
            
            ans++;
            
            if(!fl) break;
            
            if(!c) i++;
        }
        
        if(fl) return -1;
        
        return ans;
    }
};
