Input:
2
4
1 4 20 2 1 10 3 1 40 4 1 30
5
1 2 100 2 1 19 3 2 27 4 1 25 5 1 15

Output:
2 60
2 127

Optimal solution :

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pb push_back
#define pf push_front
#define mod 1000000007

int main() {
	ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    ll t;
    cin>>t;
    while(t--)
    {
        ll n;cin>>n;
        int arr[n][3];
        vector<pair<int, int>> v;
        for(int i=0; i<n; i++)
        {
            cin>>arr[i][0]>>arr[i][1]>>arr[i][2];
            v.pb(make_pair(arr[i][2], arr[i][1]));
        }
        sort(v.begin(), v.end());
        reverse(v.begin(), v.end());
        int slot[n+1];
        memset(slot, -1, sizeof(slot));
        
        for(int i=0; i<n; i++){
            int dead = v[i].second;
            while(slot[dead] != -1 && dead>0)
                dead--;
                
            if(dead > 0)
                slot[dead] = v[i].first; 
        }
        
        int sum =0 , cnt =0 ;
        for(int i=0; i<=n; i++)
        {
            if(slot[i] != -1){
                cnt++; sum += slot[i];
            }
        }
        cout<<cnt<<" "<<sum<<"\n";
    }
    return 0;
}
