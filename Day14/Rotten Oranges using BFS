I/p : 
2 1 0 2 1 
1 0 1 2 1 
1 0 0 2 1

o/p : 2

// Time complextity : O(n)
// Space complexity : O(1)
#include <bits/stdc++.h>
using namespace std;

bool checkForRotten(vector<vector<int>> matrix,int r,int c)
{
    for(int i=0; i<r; i++)
    {
        for(int j=0; j<c; j++)
        {
            if(matrix[i][j] == 1) return false;
        }
    }
    
    return true;
}


vector<pair<int,int>> call(vector<vector<int>> &a,int r,int c,int x,int y)
{
    vector<pair<int,int>> res;
    
    //left 
    if(y-1 >= 0)
    {
        if(a[x][y-1] == 1)
        {
            a[x][y-1] = 2;
            res.push_back({x,y-1});
        }
    }
    
    //right
    if(y+1 < c)
    {
        if(a[x][y+1] == 1)
        {
            a[x][y+1] = 2;
            res.push_back({x,y+1});
        }
    }
    
    
    //top 
    if(x-1 >= 0)
    {
        if(a[x-1][y] == 1)
        {
            a[x-1][y] = 2;
            res.push_back({x-1,y});
        }
    }
    
    //bottom
    if(x+1 < r)
    {
        if(a[x+1][y] == 1)
        {
            a[x+1][y] = 2;
            res.push_back({x+1,y});
        }
    }
    
    return res;
}


int main() {
	// your code goes here
	
	int r, c;
	cin >> r >> c;
	
	vector<vector<int>> matrix(r, vector<int>(c));
	for(int i=0; i<r; i++)
	{
		for(int j=0; j<c; j++)
		cin >> matrix[i][j] ;
	}
	
	
	// 2 - rotten 
	// 1 - fresh
	// 0 - empty
	
	 queue<pair<int,int>> q;
    
    for(int i=0; i<r; i++)
    {
        for(int j=0; j<c; j++)
        {
            if(matrix[i][j] == 2) q.push({i,j});
        }
    }
    
    for(int t=0; t>=0; t++)
    {
        if(q.empty())
        {
            if(checkForRotten(matrix,r,c))
            	cout << t-1 << " ";
            break;
        }
        else{
            int n = q.size();
            while(n--)
            {
            pair<int,int> p = q.front(); q.pop();
            int x = p.first;
            int y = p.second;
            
            vector<pair<int,int>> res = call(matrix,r,c,x,y);
            for(auto val : res)
            q.push(val);
          
            }
        }
        
    }
	
	
	return 0;
}
