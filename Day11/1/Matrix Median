// Time compelxity : O(a.size() * 32 * log(c))
// Space complexity : O(1)
Input 1:
    A = [   [1, 3, 5],
            [2, 6, 9],
            [3, 6, 9]   ]
Output 1:
    5
Explanation 1:
    A = [1, 2, 3, 3, 5, 6, 6, 9, 9]
    Median is 5. So, we return 5.

Input 2:
    A = [   [5, 17, 100]    ]
Output 2:
    17

int Solution::findMedian(vector<vector<int> > &a) {
    
    int r = a.size() , c = a[0].size() , min = INT_MAX , max = INT_MIN , p=0;
    for(int i=0; i<r; i++)
    {
        if(a[i][0] < min) min = a[i][0];
        if(a[i][c-1] > max) max = a[i][c-1];
    }
    
    int d = (r*c+1)/2;
    
    while(min < max)
    {
        int mid = (min + max)/2;
          int p = 0; 
  
       
        for (int i = 0; i < r; ++i) 
           p+=  upper_bound(&a[i][0], &a[i][c], mid) - &a[i][0];
        if(p < d) min = mid+1;
        else max = mid;
        
    }
    
    return min;
    
}
