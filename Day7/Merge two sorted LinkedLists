Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4


My optimal solution :

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
         if(!l1 && !l2) return NULL;
        
        ListNode *res = NULL , *q ;
        
        while(l1 && l2)
        {
            if(l1 -> val <= l2 -> val)
            {
                if(res == NULL)
                {
                    res = l1 ;
                    q = res;
                }
                else
                {
                    res -> next = l1;
                    res = res -> next;
                }
                l1 = l1 -> next;
            }
            
            else if(l1 -> val > l2 -> val)
            {
                if(res == NULL)
                {
                    res = l2;
                    q = res;
                }
                else
                {
                    res -> next = l2;
                    res = res -> next;                    
                }
                l2 = l2 -> next;
            }
            
        }
        if(!l1 || !l2)
        {
            if(l1)
                res -> next = l1;
            if(l2)
                res -> next = l2;
        }
       
        return q;
    }
};
