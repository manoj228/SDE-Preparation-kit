Example 1:

Input: N = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4], group2 [2,3]
Example 2:

Input: N = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false

My optimal Solution:


class Solution {
public:
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        
        vector<vector<int>> adj(N+1);
        vector<int> color(N+1,0);
        vector<bool> vis(N + 1, false);
        
        for (auto &edge: dislikes)
        {
            int u = edge[0];
            int v = edge[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
         
        
        queue<int>  q;
        
        for(int i=1; i<=N; ++i)
        {
            if(!vis[i])
            {
            color[i] = 1;
            q.push(i);
            
            while(!q.empty())
            {
                int u = q.front(); q.pop();
                
                if(vis[u]) continue;
                
                vis[u] = true;
                
                for(auto v : adj[u])
                {
                    if(color[u] == color[v])
                        return false;
                    
                    if(color[u] == 1)
                        color[v] = 2;
                    else
                        color[v] = 1;
                    
                    q.push(v);
                }
            }
            }
        } 
        
        return true;
        
    }
};
