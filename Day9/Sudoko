Example 1:

Input:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
Output: true
Example 2:

Input:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being 
    modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.

Optimal solution:

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        
            for(int i=0;i<board.size();i++){
            for(int j=0;j<board[i].size();j++){
                if(board[i][j]!='.'){
                    if(isSafe(board,i,j,board[i][j])==false){
                        return false;
                    }
                }
            }
        }
        return true;
    }
    bool isSafe(vector<vector<char>>& board,int row,int col, char num){
        return isSafeRow(board,row,col,num) && isSafeCol(board,row, col,num) && isSafeGrid(board,row,col,num);
    }
    bool isSafeRow(vector<vector<char>>& board,int row,int col,char num){
        for(int j=0;j<board.size();j++){
            if(j!=col && board[row][j]==num){
                return false;
            }
        }
        return true;
    }
    bool isSafeCol(vector<vector<char>>& board,int row,int col,char num){
        for(int i=0;i<board.size();i++){
            if(i!=row && board[i][col]==num){
                return false;
            }
        }
        return true;
    }
    bool isSafeGrid(vector<vector<char>>& board,int row,int col,char num){
        int row_factor=row-(row%3);
        int col_factor=col-(col%3);
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(i+row_factor != row && j+col_factor!=col && board[i+row_factor][j+col_factor]==num){
                    return false;
                }
            }
        }
        return true;
    
    }
};
